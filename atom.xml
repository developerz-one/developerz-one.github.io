<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>developerz-one</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://developerz-one.github.io/"/>
  <updated>2018-07-21T12:33:35.767Z</updated>
  <id>https://developerz-one.github.io/</id>
  
  <author>
    <name>Pravin Chikhale</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Getting started with Playframework 2.6.x</title>
    <link href="https://developerz-one.github.io/2018/07/21/getting-started-with-playframework-2-6/"/>
    <id>https://developerz-one.github.io/2018/07/21/getting-started-with-playframework-2-6/</id>
    <published>2018-07-21T12:31:26.000Z</published>
    <updated>2018-07-21T12:33:35.767Z</updated>
    
    <content type="html"><![CDATA[<p>Rapid development, ready to market or at least quick to market, highly scalable is current development standard and playframework resonate this very accurately. </p><p>Playframework started as simple project where basic need was to provide route based concurrent and non-blocking and asynchronous request processing approach to access web application. </p><p>And most important of all  “Play is <a href="https://www.reactivemanifesto.org/" target="_blank" rel="noopener">reactive</a>“. That means it follows</p><ul><li>Responsive</li><li>Resilient</li><li>Elastic</li><li>Message Driven</li></ul><p>Above basic background of Playframework is enough for getting started. Let’s begin hands-on:</p><p>In this beginners guide we are going to start with simple hello world application in Playframework using Java.</p><img src="/2018/07/21/getting-started-with-playframework-2-6/welcome-play.jpg"><h3 id="Setting-up-environment"><a href="#Setting-up-environment" class="headerlink" title="Setting up environment:"></a>Setting up environment:</h3><ul><li><a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">JDK 8+</a></li><li>IDE (<a href="http://scala-ide.org/download/sdk.html" target="_blank" rel="noopener">Eclipse with SBT</a>, <a href="https://www.jetbrains.com/idea/download/#section=windows" target="_blank" rel="noopener">Intellij</a> or whatever you prefer)</li><li><a href="https://www.scala-sbt.org/download.html" target="_blank" rel="noopener">SBT</a> (<strong>S</strong>imple <strong>B</strong>uild <strong>T</strong>ool)</li><li><a href="https://www.scala-lang.org/download/" target="_blank" rel="noopener">Scala</a></li></ul><p>You can get plenty of online articals of installing above software on your system. </p><h3 id="Creating-new-play-application-from-sample-project"><a href="#Creating-new-play-application-from-sample-project" class="headerlink" title="Creating new play application from sample project:"></a>Creating new play application from sample project:</h3><p>One simple way to get started with Play project is generating it using sbt<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sbt new playframework/play-java-seed.g8</span><br></pre></td></tr></table></figure></p><img src="/2018/07/21/getting-started-with-playframework-2-6/play-calculator.gif"><h3 id="Running-play-application"><a href="#Running-play-application" class="headerlink" title="Running play application:"></a>Running play application:</h3><p>SBT has made development process very easy by provide lot of build commands in built. With few commands your application will be up and running in no time. We will be using run command parameter with sbt to start our play application.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; sbt run</span><br></pre></td></tr></table></figure></p><p>Once sbt run, you can visit page on<br><a href="http://localhost:9000/" target="_blank" rel="noopener">http://localhost:9000/</a></p><img src="/2018/07/21/getting-started-with-playframework-2-6/sbt-run.gif"><p>To stop the server, go to command prompt  and just press <em>ENTER</em> </p><p><strong>NOTE: When running for first time, it will take time to download all dependancies. So be patient!!!</strong></p><p>Here, run cammand will internally compile your source code and make it available for execution. If you want to compile it specificaly, you can do it by providing clean and compile as two parameter to sbt. For example as below:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sbt clean compile</span><br></pre></td></tr></table></figure><img src="/2018/07/21/getting-started-with-playframework-2-6/sbt-clean-compile.gif"><blockquote><p>Want to know more about <a href="https://www.scala-sbt.org/1.x/docs/Command-Line-Reference.html" target="_blank" rel="noopener">SBT</a>?</p></blockquote><h3 id="Importing-play-application-in-Intellij-IDE"><a href="#Importing-play-application-in-Intellij-IDE" class="headerlink" title="Importing play application in Intellij IDE:"></a>Importing play application in Intellij IDE:</h3><p>To start with hand’s on development with play, let’s import it in Intellij</p><h4 id="Importing-for-first-project-in-Intellij"><a href="#Importing-for-first-project-in-Intellij" class="headerlink" title="Importing for first project in Intellij?"></a>Importing for first project in Intellij?</h4><img src="/2018/07/21/getting-started-with-playframework-2-6/intellij-first-import.gif"><h4 id="Already-Intellij-pro"><a href="#Already-Intellij-pro" class="headerlink" title="Already Intellij pro???"></a>Already Intellij pro???</h4><img src="/2018/07/21/getting-started-with-playframework-2-6/intellij-import.png"><h2 id="Exploring-and-customizing-the-base-project"><a href="#Exploring-and-customizing-the-base-project" class="headerlink" title="Exploring and customizing the base project"></a>Exploring and customizing the base project</h2><p>Hmm.. now we are getting somewhere…<br>For simplicity, we will be focussing on four files in this project:</p><ol><li>build.sbt</li><li>routes</li><li>MyController.java</li><li>index.scala.html</li></ol><ul><li><p><strong>build.sbt</strong> in <em>sbt</em> is what <strong><em>pom.xml to maven</em></strong>. This file will contain the dependency definition and build instructions (such as compile/package/deploy stuff). This file you will be modifying mostly only for updating libraries dependancies.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   name := <span class="string">""</span><span class="string">"play-calculator"</span><span class="string">""</span>  </span><br><span class="line">organization := <span class="string">"com.calc"</span>  </span><br><span class="line">version := <span class="string">"1.0-SNAPSHOT"</span>  </span><br><span class="line"><span class="keyword">lazy</span> <span class="keyword">val</span> root = (project in file(<span class="string">"."</span>)).enablePlugins(<span class="type">PlayJava</span>)  </span><br><span class="line">scalaVersion := <span class="string">"2.12.4"</span>  </span><br><span class="line">libraryDependencies += guice</span><br></pre></td></tr></table></figure></li><li><p><strong>routes</strong> is cool part of Playframework!! Here you provide URI paths which will be used by end user to access your application. This routes links to the controller which will have your custom logic to do anything.. For me it just says <strong><em>Hi programmer</em></strong> to me!!!</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># An example controller showing a sample home page  </span><br><span class="line">GET     /          controllers.MyController.hello</span><br></pre></td></tr></table></figure></li><li><p><strong>MyController.java</strong> is simple controller created for this demo. To create we just simple extend <em>play.mvc.Controller</em> and create hello method.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> controllers;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> play.mvc.Controller;  </span><br><span class="line"><span class="keyword">import</span> play.mvc.Result;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> <span class="keyword">extends</span> <span class="title">Controller</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">hello</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> ok(<span class="string">"&lt;b&gt;&lt;i&gt;Hi programmer&lt;/i&gt;&lt;/b&gt;"</span>).as(<span class="string">"text/html"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>index.scala.html</strong> is used as view for the response rendering by Play. In this you will be inlcuding static resource requird, such as CSS, JS. Playframework uses <a href="https://www.playframework.com/documentation/2.6.x/JavaTemplates" target="_blank" rel="noopener">Twirl template engine</a> to access dynamic variable returned from Controller. In this example we will skip this for now. But we will be covering handson for this in upcoming post.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@()  </span><br><span class="line"><span class="meta">@main</span>(<span class="string">"Welcome to Play"</span>) &#123;  </span><br><span class="line">  &lt;h1&gt;<span class="type">Welcome</span> to <span class="type">Play</span>!&lt;/h1&gt;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>Now its time for action!!!<br><img src="/2018/07/21/getting-started-with-playframework-2-6/play-hi-programmer.gif"></p><h3 id="Soon-to-upload-video-covering-all-above-steps"><a href="#Soon-to-upload-video-covering-all-above-steps" class="headerlink" title="Soon to upload video covering all above steps!"></a>Soon to upload video covering all above steps!</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Rapid development, ready to market or at least quick to market, highly scalable is current development standard and playframework resonat
      
    
    </summary>
    
      <category term="Playframework" scheme="https://developerz-one.github.io/categories/Playframework/"/>
    
      <category term="Java" scheme="https://developerz-one.github.io/categories/Playframework/Java/"/>
    
    
      <category term="playframework" scheme="https://developerz-one.github.io/tags/playframework/"/>
    
      <category term="java" scheme="https://developerz-one.github.io/tags/java/"/>
    
  </entry>
  
</feed>
