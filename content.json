{"meta":{"title":"developerz-one","subtitle":null,"description":null,"author":"Pravin Chikhale","url":"https://developerz-one.github.io"},"pages":[],"posts":[{"title":"Getting started with Playframework 2.6.x","slug":"getting-started-with-playframework-2-6","date":"2018-07-21T12:31:26.000Z","updated":"2018-07-21T12:33:35.767Z","comments":true,"path":"2018/07/21/getting-started-with-playframework-2-6/","link":"","permalink":"https://developerz-one.github.io/2018/07/21/getting-started-with-playframework-2-6/","excerpt":"","text":"Rapid development, ready to market or at least quick to market, highly scalable is current development standard and playframework resonate this very accurately. Playframework started as simple project where basic need was to provide route based concurrent and non-blocking and asynchronous request processing approach to access web application. And most important of all “Play is reactive“. That means it follows Responsive Resilient Elastic Message Driven Above basic background of Playframework is enough for getting started. Let’s begin hands-on: In this beginners guide we are going to start with simple hello world application in Playframework using Java. Setting up environment: JDK 8+ IDE (Eclipse with SBT, Intellij or whatever you prefer) SBT (Simple Build Tool) Scala You can get plenty of online articals of installing above software on your system. Creating new play application from sample project:One simple way to get started with Play project is generating it using sbt1sbt new playframework/play-java-seed.g8 Running play application:SBT has made development process very easy by provide lot of build commands in built. With few commands your application will be up and running in no time. We will be using run command parameter with sbt to start our play application.1&gt; sbt run Once sbt run, you can visit page onhttp://localhost:9000/ To stop the server, go to command prompt and just press ENTER NOTE: When running for first time, it will take time to download all dependancies. So be patient!!! Here, run cammand will internally compile your source code and make it available for execution. If you want to compile it specificaly, you can do it by providing clean and compile as two parameter to sbt. For example as below: 1sbt clean compile Want to know more about SBT? Importing play application in Intellij IDE:To start with hand’s on development with play, let’s import it in Intellij Importing for first project in Intellij? Already Intellij pro??? Exploring and customizing the base projectHmm.. now we are getting somewhere…For simplicity, we will be focussing on four files in this project: build.sbt routes MyController.java index.scala.html build.sbt in sbt is what pom.xml to maven. This file will contain the dependency definition and build instructions (such as compile/package/deploy stuff). This file you will be modifying mostly only for updating libraries dependancies. 123456 name := \"\"\"play-calculator\"\"\" organization := \"com.calc\" version := \"1.0-SNAPSHOT\" lazy val root = (project in file(\".\")).enablePlugins(PlayJava) scalaVersion := \"2.12.4\" libraryDependencies += guice routes is cool part of Playframework!! Here you provide URI paths which will be used by end user to access your application. This routes links to the controller which will have your custom logic to do anything.. For me it just says Hi programmer to me!!! 12# An example controller showing a sample home page GET / controllers.MyController.hello MyController.java is simple controller created for this demo. To create we just simple extend play.mvc.Controller and create hello method. 12345678910package controllers; import play.mvc.Controller; import play.mvc.Result; public class MyController extends Controller &#123; public Result hello() &#123; return ok(\"&lt;b&gt;&lt;i&gt;Hi programmer&lt;/i&gt;&lt;/b&gt;\").as(\"text/html\"); &#125; &#125; index.scala.html is used as view for the response rendering by Play. In this you will be inlcuding static resource requird, such as CSS, JS. Playframework uses Twirl template engine to access dynamic variable returned from Controller. In this example we will skip this for now. But we will be covering handson for this in upcoming post. 1234@() @main(\"Welcome to Play\") &#123; &lt;h1&gt;Welcome to Play!&lt;/h1&gt; &#125; Now its time for action!!! Soon to upload video covering all above steps!","categories":[{"name":"Playframework","slug":"Playframework","permalink":"https://developerz-one.github.io/categories/Playframework/"},{"name":"Java","slug":"Playframework/Java","permalink":"https://developerz-one.github.io/categories/Playframework/Java/"}],"tags":[{"name":"playframework","slug":"playframework","permalink":"https://developerz-one.github.io/tags/playframework/"},{"name":"java","slug":"java","permalink":"https://developerz-one.github.io/tags/java/"}]}]}